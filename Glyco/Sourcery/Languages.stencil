# Intermediate Languages Supported by Glyco
**Glyco** is a nanopass compiler, so-called because it consists of numerous intermediate languages and small passes.

The pipeline, from high-level to low-level is:
{% for lang in types.typealiases where lang.name == "HighestSupportedLanguage" %}
{% include "Pipeline.stencil" %}
{% endfor %} ELF.

This document is generated automatically by [Sourcery](https://github.com/krzysztofzablocki/Sourcery) using GlycoKit's source files as input. To update it, go to the project root (`/Glyco` in the repository) and invoke `sourcery`. Pass the `--watch` flag to enable continuous updates.

## How to Use
Every intermediate language is defined by a context-free grammar, listed below. To write a program in some language, choose a production rule for that language's `Program` nonterminal (although often there's only one rule) and write a production that conforms to that rule. The rule mentions other nonterminals which are either defined in the same language are inherited from the lower language.

A program written in some language `XY` should be stored in a file with extension `.xy` (case-insensitive) since Glyco uses the extension to determine the source language.

## Shared Grammar
<dl>
	<dt><code>[<var>N</var>]</code> for some nonterminal <var>N</var></dt>
	<dd>Zero or more productions of <var>N</var>, each separated by whitespace (spaces, tabs, newlines, paragraph terminators, etc.).</dd>
	<dt><code>Bool</code></dt>
	<dd><code>true</code></dd>
	<dd><code>"true"</code></dd>
	<dd><code>false</code></dd>
	<dd><code>"false"</code></dd>
	<dt><code>Int</code></dt>
	<dd>One or more characters between 0 and 9, inclusive, optionally prefixed by <kbd>-</kbd>. The value must be representable in the C <code>int</code> type of the compiling machine.</dd>
	<dt><code>String</code></dt>
	<dd>A letter (Unicode General Category L* and M*) or underscore <kbd>_</kbd>, followed by any number of alphanumeric characters (Unicode General Categories L*, M*, and N*) or underscores <kbd>_</kbd>.</dd>
	<dd>Zero or more characters enclosed in double-quotes <kbd>"</kbd>, with any occurrences of the double-quote character <kbd>"</kbd> in the string content replaced with two instances of the same, i.e., <kbd>""</kbd>.</dd>
</dl>

{% for lang in types.typealiases where lang.name == "HighestSupportedLanguage" %}
{% include "Grammar.stencil" %}
{% endfor %}
