(
	let(
		(one, 1)
		(
			plusOne,
			letType(
				nominal(cl.Closure, cap(record(((one, s32)), sealed: true))),
				in: let(
					(ob.tseal, seal)
					(ob.oseal, seal)
					(ob.cl.Closure.type, let((ob.typeobj, record((seal, ob.oseal))), in: sealed(ob.typeobj, with: ob.tseal)))
					(
						ob.ob.cl.Closure.Type.createObject.m,
						sealed(
							λ(
								takes: (ob.self, cap(record(((seal, cap(seal(sealed: false)))), sealed: true)), sealed: true),
								returns: cap(record(((one, s32)), sealed: true)),
								in: let(
									(ob.seal, field(seal, of: ob.self)) (ob.self, record((one, one))),
									in: do(do(), then: value(sealed(ob.self, with: ob.seal)))
								)
							),
							with: ob.tseal
						)
					)
					(
						ob.cl.Closure.invoke.m,
						sealed(
							λ(
								takes: (ob.self, cap(record(((one, s32)), sealed: true)), sealed: true)
								(term, s32, sealed: false),
								returns: s32,
								in: let((one, field(one, of: ob.self)), in: value(binary(one, add, term)))
							),
							with: ob.oseal
						)
					),
					in: record((receiver, evaluate(ob.ob.cl.Closure.Type.createObject.m, ob.cl.Closure.type)) (method, ob.cl.Closure.invoke.m))
				)
			)
		),
		in: evaluate(plusOne, 2)
	)
)