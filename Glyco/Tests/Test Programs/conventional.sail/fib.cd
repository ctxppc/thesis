(
	do(
		pushFrame((allocatedByteSize: 32))
		set(cap, frame((offset: -16)), to: register(ra))
		set(s32, register(a0), to: constant(0))
		set(s32, register(a1), to: constant(1))
		set(s32, register(a2), to: constant(30))
		call(fib)
		set(cap, register(ra), to: frame((offset: -16)))
		popFrame()
		return(to: register(ra))
	),
	procedures: (
		fib,
		in: do(
			pushFrame((allocatedByteSize: 48))
			set(cap, frame((offset: -16)), to: register(s1))
			do()
			do()
			do()
			do()
			do()
			do()
			do()
			do()
			do()
			do()
			set(cap, frame((offset: -32)), to: register(ra))
			set(s32, register(a3), to: register(a0))
			if(
				do(
					set(s32, register(ra), to: register(a2)) set(s32, register(s1), to: constant(0)),
					then: relation(register(ra), le, register(s1))
				),
				then: do(
					set(s32, register(a0), to: register(a1))
					set(cap, register(s1), to: frame((offset: -16)))
					do()
					do()
					do()
					do()
					do()
					do()
					do()
					do()
					do()
					do()
					set(cap, register(ra), to: frame((offset: -32)))
					popFrame()
					return(to: register(ra))
				),
				else: do(
					set(s32, register(a0), to: register(a1))
					compute(register(a1), register(a3), add, register(a1))
					set(s32, register(ra), to: constant(1))
					compute(register(a2), register(a2), sub, register(ra))
					call(fib)
					set(cap, register(s1), to: frame((offset: -16)))
					do()
					do()
					do()
					do()
					do()
					do()
					do()
					do()
					do()
					do()
					set(cap, register(ra), to: frame((offset: -32)))
					popFrame()
					return(to: register(ra))
				)
			)
		)
	)
)