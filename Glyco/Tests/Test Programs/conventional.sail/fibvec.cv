(
	do(
		set(ls.arg0, to: source(constant(1)))
		set(ls.arg1, to: source(constant(1)))
		set(df.result, to: evaluate(fib, location(ls.arg0) location(ls.arg1)))
		return(location(df.result))
	),
	procedures: (
		fib,
		takes: (ls.first, s32(), sealed: false) (ls.second, s32(), sealed: false),
		returns: s32(),
		in: do(
			set(ls.arg0, to: source(constant(2)))
			set(ls.arg1, to: source(constant(29)))
			set(ls.arg2, to: vector(s32(), count: 30))
			set(df.result$1, to: evaluate(recFib, location(ls.arg0) location(ls.arg1) location(ls.arg2)))
			return(location(df.result$1))
		)
	)
	(
		recFib,
		takes: (ls.index, s32(), sealed: false)
		(ls.lastIndex, s32(), sealed: false)
		(ls.nums, cap(vector(of: s32(), sealed: false)), sealed: false),
		returns: s32(),
		in: if(
			do(
				set(ls.lhs, to: source(location(ls.index))) set(ls.rhs, to: source(location(ls.lastIndex))),
				then: relation(location(ls.lhs), gt, location(ls.rhs))
			),
			then: do(
				set(
					df.result$2,
					to: do(
						set(ls.vec, to: source(location(ls.nums))) set(ls.idx, to: source(location(ls.lastIndex))),
						then: element(of: ls.vec, at: location(ls.idx))
					)
				)
				return(location(df.result$2))
			),
			else: do(
				set(
					ls.indexOfFirst,
					to: do(
						set(ls.lhs$1, to: source(location(ls.index))) set(ls.rhs$1, to: source(constant(2))),
						then: binary(location(ls.lhs$1), sub, location(ls.rhs$1))
					)
				)
				set(
					ls.indexOfSecond,
					to: do(
						set(ls.lhs$2, to: source(location(ls.index))) set(ls.rhs$2, to: source(constant(1))),
						then: binary(location(ls.lhs$2), sub, location(ls.rhs$2))
					)
				)
				set(
					ls.nextIndex,
					to: do(
						set(ls.lhs$3, to: source(location(ls.index))) set(ls.rhs$3, to: source(constant(1))),
						then: binary(location(ls.lhs$3), add, location(ls.rhs$3))
					)
				)
				set(
					ls.fibNum,
					to: do(
						set(
							ls.lhs$4,
							to: do(
								set(ls.vec$1, to: source(location(ls.nums))) set(ls.idx$1, to: source(location(ls.indexOfFirst))),
								then: element(of: ls.vec$1, at: location(ls.idx$1))
							)
						)
						set(
							ls.rhs$4,
							to: do(
								set(ls.vec$2, to: source(location(ls.nums))) set(ls.idx$2, to: source(location(ls.indexOfSecond))),
								then: element(of: ls.vec$2, at: location(ls.idx$2))
							)
						),
						then: binary(location(ls.lhs$4), add, location(ls.rhs$4))
					)
				)
				set(ls.vec$3, to: source(location(ls.nums)))
				set(ls.idx$3, to: source(location(ls.index)))
				set(ls.elem, to: source(location(ls.fibNum)))
				setElement(of: ls.vec$3, at: location(ls.idx$3), to: location(ls.elem))
				set(ls.arg0, to: source(location(ls.nextIndex)))
				set(ls.arg1, to: source(location(ls.lastIndex)))
				set(ls.arg2, to: source(location(ls.nums)))
				set(df.result$3, to: evaluate(recFib, location(ls.arg0) location(ls.arg1) location(ls.arg2)))
				return(location(df.result$3))
			)
		)
	)
)